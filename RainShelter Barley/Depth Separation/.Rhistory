output$soilwaterdeficitPlot <- renderPlot({
ggplot(summary_data) +
geom_ribbon(aes(x=Time, ymin=Min, ymax=Max, fill=Group), alpha=0.2) +
geom_line(aes(x=Time, y=Mean, colour=Group, group=Group))+
ylim (-250, 50) +
scale_x_datetime(breaks = "5 days", labels=date_format("%b %d")) +
xlab("Date") + ylab("Soil Water Deficit (mm)")
}, height=500, width=1200)
})
start_date = '2014-11-05'
end_date = '2015-01-10'
sensor_type ="VolumetricWaterContent"
df <- mergeData(start_date, end_date, sensor_type)
soil_water_deficit <- calculateSoilWaterDeficit(df)
summary_data <- soil_water_deficit %>%
group_by(Group, Time) %>%
summarise(Mean=mean(soilwaterdeficit, na.rm=TRUE),
Max=max(soilwaterdeficit, na.rm=TRUE),
Min=min(soilwaterdeficit, na.rm=TRUE))
output$soilwaterdeficitPlot <- renderPlot({
ggplot(summary_data) +
geom_ribbon(aes(x=Time, ymin=Min, ymax=Max, fill=Group), alpha=0.2) +
geom_line(aes(x=Time, y=Mean, colour=Group, group=Group))+
ylim (-250, 50) +
scale_x_datetime(breaks = "5 days", labels=date_format("%b %d")) +
xlab("Date") + ylab("Soil Water Deficit (mm)")
}, height=500, width=1200)
ggplot(summary_data) +
geom_ribbon(aes(x=Time, ymin=Min, ymax=Max, fill=Group), alpha=0.2) +
geom_line(aes(x=Time, y=Mean, colour=Group, group=Group))+
ylim (-250, 50) +
scale_x_datetime(breaks = "5 days", labels=date_format("%b %d")) +
xlab("Date") + ylab("Soil Water Deficit (mm)")
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/StockVisExample')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
Q
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/StockVisExample')
shiny::runApp('C:/GitHubRepos/Summer Project - R/StockVisExample')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
library(tidyr)
con <- DBConnection()
header_data <- dbReadTable(con, "headerversion")
raw_data<- dbReadTable(con, "rawcsvdata")
closeDBConnection(con)
header_names <- names(read.csv(textConnection(header_data$HeaderLine)))
all_data <- separate(raw_data, line, into=header_names, sep=",")
return(all_data)
library(tidyr)
con <- DBConnection()
header_data <- dbReadTable(con, "headerversion")
raw_data<- dbReadTable(con, "rawcsvdata")
closeDBConnection(con)
header_names <- names(read.csv(textConnection(header_data$HeaderLine)))
all_data <- separate(raw_data, line, into=header_names, sep=",")
View(all_data)
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
subset_dataset<-dataset()
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
con <- DBConnection()
start_date = "2014-11-05"
end_date= "2014-11-30"
sql_select = "Select time as time, (each(data)). * from hstorealphadata where time BETWEEN ", start_date " AND ", end_date
data <- dbGetQuery(con, sql_select)
start_date = "2014-11-05"
end_date= "2014-11-30"
sql_select = paste("Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, sep=" ")
print(sql_select)
con <- DBConnection()
start_date = "2014-11-05"
end_date= "2014-11-30"
sql_select = paste("Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, sep=" ")
print(sql_select)
data <- dbGetQuery(con, sql_select)
start_date = "'2014-11-05'"
end_date= "'2014-11-30'"
sql_select = paste("Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, sep=" ")
print(sql_select)
con <- DBConnection()
start_date = "'2014-11-05'"
end_date= "'2014-11-30'"
sql_select = paste("Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, sep=" ")
print(sql_select)
data <- dbGetQuery(con, sql_select)
View(data)
closeDBConnection(con)
sql_select= paste("Select a.time, a.key, a.value, b.cultivar, b.irrigation, b.depth, b.plot from (Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, ") a inner join alphasensorinfo b on a.key=b.sensorid where b.measurement= ", sensor_type, sep=" ")
start_date = "'2014-11-05'"
end_date= "'2014-11-30'"
sensor_type="'VolumetricWaterContent'"
sql_select= paste("Select a.time, a.key, a.value, b.cultivar, b.irrigation, b.depth, b.plot from (Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, ") a inner join alphasensorinfo b on a.key=b.sensorid where b.measurement= ", sensor_type, sep=" ")
start_date = "'2014-11-05'"
end_date= "'2014-11-30'"
sensor_type="'VolumetricWaterContent'"
sql_select= paste("Select a.time, a.key, a.value, b.cultivar, b.irrigation, b.depth, b.plot from (Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, ") a inner join alphasensorinfo b on a.key=b.sensorid where b.measurement= ", sensor_type, sep=" ")
data <- dbGetQuery(con, sql_select)
closeDBConnection(con)
con <- DBConnection()
start_date = "'2014-11-05'"
end_date= "'2014-11-30'"
sensor_type="'VolumetricWaterContent'"
sql_select= paste("Select a.time, a.key, a.value, b.cultivar, b.irrigation, b.depth, b.plot from (Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, ") a inner join alphasensorinfo b on a.key=b.sensorid where b.measurement= ", sensor_type, sep=" ")
data <- dbGetQuery(con, sql_select)
closeDBConnection(con)
View(data)
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/SWD hstore')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/SWD hstore')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/SWD hstore')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/SWD hstore')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/SWD hstore')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
con <- DBConnection()
sensor_info <- dbReadTable(con, "alphasensorinfo")
sensor_info$sensorid <- chartr("(),", "...", sensor_info$sensorid)
closeDBConnection(con)
View(sensor_info)
View(sensor_info)
sensor_list <- allSensorInfo()%>%
select(measurement)%>%
distinct()
View(sensor_list)
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
selectInput('sensorInput', "Select a Sensor Type", choices=sensorList())
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
sidebarPanel(
dateRangeInput('dateRange',
label = 'Date range input',
start = Sys.Date()- 30, end = Sys.Date()),
selectInput('sensorInput', "Select a Sensor Type", choices=sensorList()),
),
sidebarPanel(
dateRangeInput('dateRange',
label = 'Date range input',
start = Sys.Date()- 30, end = Sys.Date()),
selectInput('sensorInput', "Select a Sensor Type", choices=sensorList()),
)
dateRangeInput('dateRange',
label = 'Date range input',
start = Sys.Date()- 30, end = Sys.Date())
selectInput('sensorInput', "Select a Sensor Type", choices=sensorList())
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
sensor_list <- allSensorInfo()%>%
select(measurement)%>%
distinct()
View(sensor_list)
View(sensor_list)
class(sensor_list)
allSensorInfo()%>%
select(measurement)%>%
distinct()
class(sensor_list)
lsit <- sensorList()
class(lsit)
sensorList()
class(sensorList())
list <-sensorList()
class(list$measurement)
sensor_type =input$sensorInput
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
View(sensor_list)
View(df)
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/OtherSensors App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/OtherSensors App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/OtherSensors App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/OtherSensors App')
profile_water <- data %>%
setwd('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
setwd('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150,
ifelse(depth=='D1B', value*150,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE))
ggplot(profile_water)+
geom_line(aes(x=Time, y=avg, colour=Group, group=Group))+
facet_wrap(~ depth, ncol=2, scales="free_y")
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
setwd('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
source('datafunctions.R')
source('datafunctions.R')
source('datafunctions.R')
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150,
ifelse(depth=='D1B', value*150,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE))
ggplot(profile_water)+
geom_line(aes(x=Time, y=avg, colour=Group, group=Group))+
facet_wrap(~ depth, ncol=2, scales="free_y")
setwd('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-30'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150,
ifelse(depth=='D1B', value*150,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE))
ggplot(profile_water)+
geom_line(aes(x=Time, y=avg, colour=Group, group=Group))+
facet_wrap(~ depth, ncol=2, scales="free_y")
setwd('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-30'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150,
ifelse(depth=='D1B', value*150,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE))
ggplot(profile_water)+
geom_line(aes(x=Time, y=avg, colour=Group, group=Group))+
facet_wrap(~ depth, ncol=3, scales="free_y")
setwd('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-30'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150,
ifelse(depth=='D1B', value*150,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE))
ggplot(profile_water)+
geom_line(aes(x=Time, y=avg, colour=Group, group=Group))+
facet_wrap(~ depth, ncol=2, scales="free_y")
View(profile_water)
View(profile_water)
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-30'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150,
ifelse(depth=='D1B', value*150,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE),
min=min(layerwater, na.rm=TRUE),
max=max(layerwater, na.rm=TRUE))
ggplot(profile_water)+
geom_line(aes(x=Time, y=avg, colour=Group, group=Group))+
geom_ribbon(aes(x=Time, ymin=min, ymax=max, fill=Group), alpha=0.2)+
facet_wrap(~ depth, ncol=2, scales="free_y")
setwd('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-30'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150,
ifelse(depth=='D1B', value*150,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE))
ggplot(profile_water)+
geom_line(aes(x=Time, y=avg, colour=Group, group=Group))+
geom_ribbon(aes(x=Time, ymin=min, ymax=max, fill=Group), alpha=0.2)+
facet_wrap(~ depth, ncol=2, scales="free_y")
setwd('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-30'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150,
ifelse(depth=='D1B', value*150,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE))
ggplot(profile_water)+
geom_line(aes(x=Time, y=avg, colour=Group, group=Group))+
facet_wrap(~ depth, ncol=2, scales="free_y")
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/SWD hstore')
setwd('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-12-15'
end_date <- '2015-01-15'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150,
ifelse(depth=='D1B', value*150,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE))
ggplot(profile_water)+
geom_line(aes(x=Time, y=avg, colour=Group, group=Group))+
facet_wrap(~ depth, ncol=2, scales="free_y")
setwd('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2015-01-01'
end_date <- '2015-01-31'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150,
ifelse(depth=='D1B', value*150,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE))
ggplot(profile_water)+
geom_line(aes(x=Time, y=avg, colour=Group, group=Group))+
facet_wrap(~ depth, ncol=2, scales="free_y")
setwd('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2015-01-01'
end_date <- '2015-01-31'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150,
ifelse(depth=='D1B', value*150,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE))
ggplot(profile_water)+
geom_line(aes(x=Time, y=avg, colour=Group, group=Group))+
facet_wrap(~ depth, ncol=2, scales="free_y")+
ylab("Layer Water")
setwd('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2015-01-01'
end_date <- '2015-01-31'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150,
ifelse(depth=='D1B', value*150,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE))
ggplot(profile_water)+
geom_line(aes(x=Time, y=avg, colour=Group, group=Group))+
facet_wrap(~ depth, ncol=2, scales="free_y")+
ylab("Layer Water (mm)")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Soil Water Deficit App')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Soil Water Deficit App')
