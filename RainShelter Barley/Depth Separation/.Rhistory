summarise(fieldcapacity=max(profilewater))
soil_water_deficit <- merge(profile_water,field_capacity, by=c('Group', 'plot')) %>%
mutate(soilwaterdeficit = -(fieldcapacity-profilewater))
#ggplot(data,aes(x=time, y=value,colour))
#grouped_data <- data %>% group_by(Group, time)
#mean_values<-summarise(grouped_data, mean(value, na.rm=TRUE))
#grouped_data %>%
#summarise(Mean=mean(value, na.rm=TRUE), Max=max(value, na.rm=TRUE), Min=min(value, na.rm=TRUE))
grouped_data <- soil_water_deficit %>%
group_by(Group, time) %>%
summarise(Mean=mean(soilwaterdeficit, na.rm=TRUE), Max=max(soilwaterdeficit, na.rm=TRUE), Min=min(soilwaterdeficit, na.rm=TRUE))
#data as time datatype
grouped_data$time <- as.POSIXlt(grouped_data$time)
ggplot(grouped_data,
aes(x=time, y=Mean, colour=Group, group=Group)) +
geom_line(size=1.0)+
ylim (-120, 0)
ggplot(grouped_data) +
geom_ribbon(aes(x=time, ymin=Min, ymax=Max, group=Group), fill=grey, alpha=0.6) +
geom_line(aes(x=time, y=Mean, colour=Group, group=Group))
profile_water <- sensor_data %>%
group_by(time, Group, plot) %>%
summarise(profilewater=sum(layerwater)
View(sensor_data)
View(sensor_data)
View(sensor_data)
profile_water <- sensor_data %>%
group_by(time, Group, plot) %>%
summarise(profilewater=sum(layerwater)
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
library(shiny)
source('datafunctions.R')
library(dplyr)
library(ggplot2)
library(scales)
# Define a server for the Shiny app
shinyServer(function(input, output) {
start_date = '2014-11-05'
end_date = '2015-01-10'
sensor_type ="VolumetricWaterContent"
df <- mergeData(start_date, end_date, sensor_type)
soil_water_deficit <- calculateSoilWaterDeficit(df)
summary_data <- soil_water_deficit %>%
group_by(Group, Time) %>%
summarise(Mean=mean(soilwaterdeficit, na.rm=TRUE),
Max=max(soilwaterdeficit, na.rm=TRUE),
Min=min(soilwaterdeficit, na.rm=TRUE))
# Fill in the spot we created for a plot
output$soilwaterdeficitPlot <- renderPlot({
ggplot(summary_data) +
geom_ribbon(aes(x=Time, ymin=Min, ymax=Max, fill=Group), alpha=0.2) +
geom_line(aes(x=Time, y=Mean, colour=Group, group=Group))+
ylim (-250, 50) +
scale_x_datetime(breaks = "5 days", labels=date_format("%b %d")) +
xlab("Date") + ylab("Soil Water Deficit (mm)")
}, height=500, width=1200)
})
start_date = '2014-11-05'
end_date = '2015-01-10'
sensor_type ="VolumetricWaterContent"
df <- mergeData(start_date, end_date, sensor_type)
soil_water_deficit <- calculateSoilWaterDeficit(df)
summary_data <- soil_water_deficit %>%
group_by(Group, Time) %>%
summarise(Mean=mean(soilwaterdeficit, na.rm=TRUE),
Max=max(soilwaterdeficit, na.rm=TRUE),
Min=min(soilwaterdeficit, na.rm=TRUE))
output$soilwaterdeficitPlot <- renderPlot({
ggplot(summary_data) +
geom_ribbon(aes(x=Time, ymin=Min, ymax=Max, fill=Group), alpha=0.2) +
geom_line(aes(x=Time, y=Mean, colour=Group, group=Group))+
ylim (-250, 50) +
scale_x_datetime(breaks = "5 days", labels=date_format("%b %d")) +
xlab("Date") + ylab("Soil Water Deficit (mm)")
}, height=500, width=1200)
ggplot(summary_data) +
geom_ribbon(aes(x=Time, ymin=Min, ymax=Max, fill=Group), alpha=0.2) +
geom_line(aes(x=Time, y=Mean, colour=Group, group=Group))+
ylim (-250, 50) +
scale_x_datetime(breaks = "5 days", labels=date_format("%b %d")) +
xlab("Date") + ylab("Soil Water Deficit (mm)")
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/StockVisExample')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
Q
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/StockVisExample')
shiny::runApp('C:/GitHubRepos/Summer Project - R/StockVisExample')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
library(tidyr)
con <- DBConnection()
header_data <- dbReadTable(con, "headerversion")
raw_data<- dbReadTable(con, "rawcsvdata")
closeDBConnection(con)
header_names <- names(read.csv(textConnection(header_data$HeaderLine)))
all_data <- separate(raw_data, line, into=header_names, sep=",")
return(all_data)
library(tidyr)
con <- DBConnection()
header_data <- dbReadTable(con, "headerversion")
raw_data<- dbReadTable(con, "rawcsvdata")
closeDBConnection(con)
header_names <- names(read.csv(textConnection(header_data$HeaderLine)))
all_data <- separate(raw_data, line, into=header_names, sep=",")
View(all_data)
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
subset_dataset<-dataset()
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
con <- DBConnection()
start_date = "2014-11-05"
end_date= "2014-11-30"
sql_select = "Select time as time, (each(data)). * from hstorealphadata where time BETWEEN ", start_date " AND ", end_date
data <- dbGetQuery(con, sql_select)
start_date = "2014-11-05"
end_date= "2014-11-30"
sql_select = paste("Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, sep=" ")
print(sql_select)
con <- DBConnection()
start_date = "2014-11-05"
end_date= "2014-11-30"
sql_select = paste("Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, sep=" ")
print(sql_select)
data <- dbGetQuery(con, sql_select)
start_date = "'2014-11-05'"
end_date= "'2014-11-30'"
sql_select = paste("Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, sep=" ")
print(sql_select)
con <- DBConnection()
start_date = "'2014-11-05'"
end_date= "'2014-11-30'"
sql_select = paste("Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, sep=" ")
print(sql_select)
data <- dbGetQuery(con, sql_select)
View(data)
closeDBConnection(con)
sql_select= paste("Select a.time, a.key, a.value, b.cultivar, b.irrigation, b.depth, b.plot from (Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, ") a inner join alphasensorinfo b on a.key=b.sensorid where b.measurement= ", sensor_type, sep=" ")
start_date = "'2014-11-05'"
end_date= "'2014-11-30'"
sensor_type="'VolumetricWaterContent'"
sql_select= paste("Select a.time, a.key, a.value, b.cultivar, b.irrigation, b.depth, b.plot from (Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, ") a inner join alphasensorinfo b on a.key=b.sensorid where b.measurement= ", sensor_type, sep=" ")
start_date = "'2014-11-05'"
end_date= "'2014-11-30'"
sensor_type="'VolumetricWaterContent'"
sql_select= paste("Select a.time, a.key, a.value, b.cultivar, b.irrigation, b.depth, b.plot from (Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, ") a inner join alphasensorinfo b on a.key=b.sensorid where b.measurement= ", sensor_type, sep=" ")
data <- dbGetQuery(con, sql_select)
closeDBConnection(con)
con <- DBConnection()
start_date = "'2014-11-05'"
end_date= "'2014-11-30'"
sensor_type="'VolumetricWaterContent'"
sql_select= paste("Select a.time, a.key, a.value, b.cultivar, b.irrigation, b.depth, b.plot from (Select time as time, (each(data)). * from hstorealphadata where time BETWEEN", start_date, "AND", end_date, ") a inner join alphasensorinfo b on a.key=b.sensorid where b.measurement= ", sensor_type, sep=" ")
data <- dbGetQuery(con, sql_select)
closeDBConnection(con)
View(data)
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/SWD hstore')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/SWD hstore')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/SWD hstore')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/SWD hstore')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/SWD hstore')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
con <- DBConnection()
sensor_info <- dbReadTable(con, "alphasensorinfo")
sensor_info$sensorid <- chartr("(),", "...", sensor_info$sensorid)
closeDBConnection(con)
View(sensor_info)
View(sensor_info)
sensor_list <- allSensorInfo()%>%
select(measurement)%>%
distinct()
View(sensor_list)
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
selectInput('sensorInput', "Select a Sensor Type", choices=sensorList())
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
sidebarPanel(
dateRangeInput('dateRange',
label = 'Date range input',
start = Sys.Date()- 30, end = Sys.Date()),
selectInput('sensorInput', "Select a Sensor Type", choices=sensorList()),
),
sidebarPanel(
dateRangeInput('dateRange',
label = 'Date range input',
start = Sys.Date()- 30, end = Sys.Date()),
selectInput('sensorInput', "Select a Sensor Type", choices=sensorList()),
)
dateRangeInput('dateRange',
label = 'Date range input',
start = Sys.Date()- 30, end = Sys.Date())
selectInput('sensorInput', "Select a Sensor Type", choices=sensorList())
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
sensor_list <- allSensorInfo()%>%
select(measurement)%>%
distinct()
View(sensor_list)
View(sensor_list)
class(sensor_list)
allSensorInfo()%>%
select(measurement)%>%
distinct()
class(sensor_list)
lsit <- sensorList()
class(lsit)
sensorList()
class(sensorList())
list <-sensorList()
class(list$measurement)
sensor_type =input$sensorInput
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/Soil Water Deficit App')
View(sensor_list)
View(df)
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/OtherSensors App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/OtherSensors App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/OtherSensors App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelterBarley/OtherSensors App')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- merge_data(start_date, end_date, sensor_type)
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- merge_data(start_date, end_date, sensor_type)
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/SWD hstore')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/SWD hstore')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
View(data)
layer_water <- calculateProfileWater(data)
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
layer_water <- calculateProfileWater(data)
profile_water<-data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150/2,
ifelse(depth=='D1B', value*150/2,
ifelse(depth=='D2', value*150, value*300))))%>%
group_by(Time, Group, plot) %>%
summarise(profilewater=sum(layerwater, na.rm=TRUE))
View(profile_water)
layer_water <- calculateProfileWater(data)
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
df <- mergeData(start_date, end_date, sensor_type)
layer_water <- calculateProfileWater(df)
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/OtherSensors App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/OtherSensors App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Soil Water Deficit App')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/SWD hstore')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/OtherSensors App')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
View(df)
View(df)
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
shiny::runApp('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
View(df)
View(df)
View(data)
View(data)
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
View(df)
View(df)
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
View(df)
View(df)
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
library(dplyr)
library(ggplot2)
source('datafunctions.R')
setwd('C:/GitHubRepos/Summer Project - R/RainShelter Barley/Depth Separation')
library(dplyr)
library(ggplot2)
source('datafunctions.R')
start_date <-'2014-11-05'
end_date <- '2014-11-11'
sensor_type <- "VolumetricWaterContent"
data <- mergeData(start_date, end_date, sensor_type)
df<-calculateProfileWater(data)
df<-calculateProfileWater(data)
df<-calculateProfileWater(data)
df<-calculateProfileWater(data)
profile_water<-df %>%
mutate(layerwater= ifelse(depth=='D1I', value*150/2,
ifelse(depth=='D1B', value*150/2,
ifelse(depth=='D2', value*150, value*300))
profile_water<-df %>%
mutate(layerwater= ifelse(depth=='D1I', value*150/2,
ifelse(depth=='D1B', value*150/2,
ifelse(depth=='D2', value*150, value*300)))
View(list)
View(list)
profile_water<-df %>%
mutate(layerwater= ifelse(depth=='D1I', value*150/2,
ifelse(depth=='D1B', value*150/2,
ifelse(depth=='D2', value*150, value*300)))
profile_water<-df %>%
mutate(layerwater= ifelse(depth=='D1I', value*150/2,
ifelse(depth=='D1B', value*150/2,
ifelse(depth=='D2', value*150, value*300)))
View(list)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150/2,
ifelse(depth=='D1B', value*150/2,
ifelse(depth=='D2', value*150, value*300)))
View(data)
View(data)
View(data)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150/2,
ifelse(depth=='D1B', value*150/2,
ifelse(depth=='D2', value*150, value*300))))
View(profile_water)
View(profile_water)
ggplot(profile_water)+
geom_line(aes(x=Time, y=layerwater, colour=Group, group=Group))+
facet_grid(.~depth)
ggplot(profile_water)+
geom_line(aes(x=Time, y=layerwater, colour=Group, group=Group))+
facet_grid(depth~.)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150/2,
ifelse(depth=='D1B', value*150/2,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(profilewater=mean(layerwater, na.rm=TRUE))
View(profile_water)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150/2,
ifelse(depth=='D1B', value*150/2,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(layerwater=mean(layerwater, na.rm=TRUE))
View(profile_water)
ggplot(profile_water)+
geom_line(aes(x=Time, y=layerwater, colour=Group, group=Group))+
facet_grid(depth~.)
ggplot(profile_water)+
geom_line(aes(x=Time, y=layerwater, colour=Group, group=Group))+
facet_wrap(~ depth, ncol=2)
ggplot(profile_water)+
geom_line(aes(x=Time, y=layerwater, colour=Group, group=Group))+
facet_wrap(~ depth, ncol=2, scales="free_y")
View(profile_water)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150/2,
ifelse(depth=='D1B', value*150/2,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE))
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150/2,
ifelse(depth=='D1B', value*150/2,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE))
View(profile_water)
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150,
ifelse(depth=='D1B', value*150,
ifelse(depth=='D2', value*150, value*300)))) %>%
group_by(Time, Group, depth) %>%
summarise(avg=mean(layerwater, na.rm=TRUE))
View(profile_water)
ggplot(profile_water)+
geom_line(aes(x=Time, y=avg, colour=Group, group=Group))+
facet_wrap(~ depth, ncol=2, scales="free_y")
profile_water <- data %>%
mutate(layerwater= ifelse(depth=='D1I', value*150,
ifelse(depth=='D1B', value*150,
ifelse(depth=='D2', value*150, value*300))))
View(profile_water)
